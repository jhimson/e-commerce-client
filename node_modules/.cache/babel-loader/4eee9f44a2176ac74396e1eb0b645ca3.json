{"ast":null,"code":"const diff = require('fast-diff');\n\nconst LINE_ENDING_RE = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\n/**\n * Converts invisible characters to a commonly recognizable visible form.\n * @param {string} str - The string with invisibles to convert.\n * @returns {string} The converted string.\n */\n\nfunction showInvisibles(str) {\n  let ret = '';\n\n  for (let i = 0; i < str.length; i++) {\n    switch (str[i]) {\n      case ' ':\n        ret += '·'; // Middle Dot, \\u00B7\n\n        break;\n\n      case '\\n':\n        ret += '⏎'; // Return Symbol, \\u23ce\n\n        break;\n\n      case '\\t':\n        ret += '↹'; // Left Arrow To Bar Over Right Arrow To Bar, \\u21b9\n\n        break;\n\n      case '\\r':\n        ret += '␍'; // Carriage Return Symbol, \\u240D\n\n        break;\n\n      default:\n        ret += str[i];\n        break;\n    }\n  }\n\n  return ret;\n}\n/**\n * Generate results for differences between source code and formatted version.\n *\n * @param {string} source - The original source.\n * @param {string} prettierSource - The Prettier formatted source.\n * @returns {Array} - An array containing { operation, offset, insertText, deleteText }\n */\n\n\nfunction generateDifferences(source, prettierSource) {\n  // fast-diff returns the differences between two texts as a series of\n  // INSERT, DELETE or EQUAL operations. The results occur only in these\n  // sequences:\n  //           /-> INSERT -> EQUAL\n  //    EQUAL |           /-> EQUAL\n  //           \\-> DELETE |\n  //                      \\-> INSERT -> EQUAL\n  // Instead of reporting issues at each INSERT or DELETE, certain sequences\n  // are batched together and are reported as a friendlier \"replace\" operation:\n  // - A DELETE immediately followed by an INSERT.\n  // - Any number of INSERTs and DELETEs where the joining EQUAL of one's end\n  // and another's beginning does not have line endings (i.e. issues that occur\n  // on contiguous lines).\n  const results = diff(source, prettierSource);\n  const differences = [];\n  const batch = [];\n  let offset = 0; // NOTE: INSERT never advances the offset.\n\n  while (results.length) {\n    const result = results.shift();\n    const op = result[0];\n    const text = result[1];\n\n    switch (op) {\n      case diff.INSERT:\n      case diff.DELETE:\n        batch.push(result);\n        break;\n\n      case diff.EQUAL:\n        if (results.length) {\n          if (batch.length) {\n            if (LINE_ENDING_RE.test(text)) {\n              flush();\n              offset += text.length;\n            } else {\n              batch.push(result);\n            }\n          } else {\n            offset += text.length;\n          }\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unexpected fast-diff operation \"${op}\"`);\n    }\n\n    if (batch.length && !results.length) {\n      flush();\n    }\n  }\n\n  return differences;\n\n  function flush() {\n    let aheadDeleteText = '';\n    let aheadInsertText = '';\n\n    while (batch.length) {\n      const next = batch.shift();\n      const op = next[0];\n      const text = next[1];\n\n      switch (op) {\n        case diff.INSERT:\n          aheadInsertText += text;\n          break;\n\n        case diff.DELETE:\n          aheadDeleteText += text;\n          break;\n\n        case diff.EQUAL:\n          aheadDeleteText += text;\n          aheadInsertText += text;\n          break;\n      }\n    }\n\n    if (aheadDeleteText && aheadInsertText) {\n      differences.push({\n        offset,\n        operation: generateDifferences.REPLACE,\n        insertText: aheadInsertText,\n        deleteText: aheadDeleteText\n      });\n    } else if (!aheadDeleteText && aheadInsertText) {\n      differences.push({\n        offset,\n        operation: generateDifferences.INSERT,\n        insertText: aheadInsertText\n      });\n    } else if (aheadDeleteText && !aheadInsertText) {\n      differences.push({\n        offset,\n        operation: generateDifferences.DELETE,\n        deleteText: aheadDeleteText\n      });\n    }\n\n    offset += aheadDeleteText.length;\n  }\n}\n\ngenerateDifferences.INSERT = 'insert';\ngenerateDifferences.DELETE = 'delete';\ngenerateDifferences.REPLACE = 'replace';\nmodule.exports = {\n  showInvisibles,\n  generateDifferences\n};","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/node_modules/prettier-linter-helpers/index.js"],"names":["diff","require","LINE_ENDING_RE","showInvisibles","str","ret","i","length","generateDifferences","source","prettierSource","results","differences","batch","offset","result","shift","op","text","INSERT","DELETE","push","EQUAL","test","flush","Error","aheadDeleteText","aheadInsertText","next","operation","REPLACE","insertText","deleteText","module","exports"],"mappings":"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","sourcesContent":["const diff = require('fast-diff');\n\nconst LINE_ENDING_RE = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\n\n/**\n * Converts invisible characters to a commonly recognizable visible form.\n * @param {string} str - The string with invisibles to convert.\n * @returns {string} The converted string.\n */\nfunction showInvisibles(str) {\n  let ret = '';\n  for (let i = 0; i < str.length; i++) {\n    switch (str[i]) {\n      case ' ':\n        ret += '·'; // Middle Dot, \\u00B7\n        break;\n      case '\\n':\n        ret += '⏎'; // Return Symbol, \\u23ce\n        break;\n      case '\\t':\n        ret += '↹'; // Left Arrow To Bar Over Right Arrow To Bar, \\u21b9\n        break;\n      case '\\r':\n        ret += '␍'; // Carriage Return Symbol, \\u240D\n        break;\n      default:\n        ret += str[i];\n        break;\n    }\n  }\n  return ret;\n}\n\n/**\n * Generate results for differences between source code and formatted version.\n *\n * @param {string} source - The original source.\n * @param {string} prettierSource - The Prettier formatted source.\n * @returns {Array} - An array containing { operation, offset, insertText, deleteText }\n */\nfunction generateDifferences(source, prettierSource) {\n  // fast-diff returns the differences between two texts as a series of\n  // INSERT, DELETE or EQUAL operations. The results occur only in these\n  // sequences:\n  //           /-> INSERT -> EQUAL\n  //    EQUAL |           /-> EQUAL\n  //           \\-> DELETE |\n  //                      \\-> INSERT -> EQUAL\n  // Instead of reporting issues at each INSERT or DELETE, certain sequences\n  // are batched together and are reported as a friendlier \"replace\" operation:\n  // - A DELETE immediately followed by an INSERT.\n  // - Any number of INSERTs and DELETEs where the joining EQUAL of one's end\n  // and another's beginning does not have line endings (i.e. issues that occur\n  // on contiguous lines).\n\n  const results = diff(source, prettierSource);\n  const differences = [];\n\n  const batch = [];\n  let offset = 0; // NOTE: INSERT never advances the offset.\n  while (results.length) {\n    const result = results.shift();\n    const op = result[0];\n    const text = result[1];\n    switch (op) {\n      case diff.INSERT:\n      case diff.DELETE:\n        batch.push(result);\n        break;\n      case diff.EQUAL:\n        if (results.length) {\n          if (batch.length) {\n            if (LINE_ENDING_RE.test(text)) {\n              flush();\n              offset += text.length;\n            } else {\n              batch.push(result);\n            }\n          } else {\n            offset += text.length;\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unexpected fast-diff operation \"${op}\"`);\n    }\n    if (batch.length && !results.length) {\n      flush();\n    }\n  }\n\n  return differences;\n\n  function flush() {\n    let aheadDeleteText = '';\n    let aheadInsertText = '';\n    while (batch.length) {\n      const next = batch.shift();\n      const op = next[0];\n      const text = next[1];\n      switch (op) {\n        case diff.INSERT:\n          aheadInsertText += text;\n          break;\n        case diff.DELETE:\n          aheadDeleteText += text;\n          break;\n        case diff.EQUAL:\n          aheadDeleteText += text;\n          aheadInsertText += text;\n          break;\n      }\n    }\n    if (aheadDeleteText && aheadInsertText) {\n      differences.push({\n        offset,\n        operation: generateDifferences.REPLACE,\n        insertText: aheadInsertText,\n        deleteText: aheadDeleteText,\n      });\n    } else if (!aheadDeleteText && aheadInsertText) {\n      differences.push({\n        offset,\n        operation: generateDifferences.INSERT,\n        insertText: aheadInsertText,\n      });\n    } else if (aheadDeleteText && !aheadInsertText) {\n      differences.push({\n        offset,\n        operation: generateDifferences.DELETE,\n        deleteText: aheadDeleteText,\n      });\n    }\n    offset += aheadDeleteText.length;\n  }\n}\n\ngenerateDifferences.INSERT = 'insert';\ngenerateDifferences.DELETE = 'delete';\ngenerateDifferences.REPLACE = 'replace';\n\nmodule.exports = {\n  showInvisibles,\n  generateDifferences,\n};\n"]},"metadata":{},"sourceType":"script"}