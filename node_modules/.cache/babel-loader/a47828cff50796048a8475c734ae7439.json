{"ast":null,"code":"/* eslint-disable camelcase */\nimport Axios from 'axios';\nimport { userConstants } from '../constants/userConstants';\n\nconst {\n  uuid\n} = require('uuidv4');\n\nconst {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL\n} = userConstants;\nexport const login = (username, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/api/v1/users/login', {\n      username,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (email, firstname, lastname, username, password) => async dispatch => {\n  const user_id = uuid();\n\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/api/v1/users', {\n      user_id,\n      email,\n      firstname,\n      lastname,\n      username,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getUserDetails = user_id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/api/v1/users', {\n      user_id\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/src/actions/userActions.js"],"names":["Axios","userConstants","uuid","require","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","login","username","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","email","firstname","lastname","user_id","getUserDetails","getState"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\r\nimport Axios from 'axios';\r\n\r\nimport { userConstants } from '../constants/userConstants';\r\n\r\nconst { uuid } = require('uuidv4');\r\n\r\nconst {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n} = userConstants;\r\n\r\nexport const login = (username, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.post(\r\n      'http://localhost:5000/api/v1/users/login',\r\n      { username, password },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('userInfo');\r\n  dispatch({ type: USER_LOGOUT });\r\n};\r\n\r\nexport const register = (\r\n  email,\r\n  firstname,\r\n  lastname,\r\n  username,\r\n  password\r\n) => async (dispatch) => {\r\n  const user_id = uuid();\r\n  try {\r\n    dispatch({ type: USER_REGISTER_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.post(\r\n      'http://localhost:5000/api/v1/users',\r\n      { user_id, email, firstname, lastname, username, password },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getUserDetails = (user_id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_REGISTER_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.post(\r\n      'http://localhost:5000/api/v1/users',\r\n      { user_id },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}