{"ast":null,"code":"/* eslint-disable camelcase */\nimport Axios from 'axios';\nimport { orderConstants } from '../constants/orderConstants';\nconst {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n  ORDER_FETCH_REQUEST,\n  ORDER_FETCH_SUCCESS,\n  ORDER_FETCH_FAIL,\n  ORDER_DETAILS_FETCH_REQUEST,\n  ORDER_DETAILS_FETCH_SUCCESS,\n  ORDER_DETAILS_FETCH_FAIL\n} = orderConstants;\nexport const createOrder = order => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.post(`http://localhost:5000/api/v1/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getOrdersByUserId = user_id => async (dispatch, getState) => {\n  console.log(user_id);\n  const {\n    token\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_FETCH_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/orders`, config);\n    console.log(data);\n    dispatch({\n      type: ORDER_FETCH_SUCCESS,\n      payload: data.rows\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_FETCH_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getOrdersByOrderId = order_id => async (dispatch, getState) => {\n  const {\n    token,\n    user_id\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_DETAILS_FETCH_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.post(`http://localhost:5000/api/v1/orders/orderDetails`, {\n      user_id,\n      order_id\n    }, config);\n    let orders = localStorage.getItem('orderDetailsList') ? JSON.parse(localStorage.getItem('orderDetailsList')) : [];\n\n    if (orders.length === 0) {\n      orders = [...orders, data.rows];\n    } else {\n      let isExist = false;\n      orders.forEach(order => {\n        if (order.order_id === data.rows.order_id) {\n          console.log(order.order_id, data.rows.order_id);\n          isExist = true;\n        }\n      });\n\n      if (!isExist) {\n        orders = [...orders, data.rows];\n      }\n    }\n\n    console.log('ORDERS ARRAY', orders);\n    dispatch({\n      type: ORDER_DETAILS_FETCH_SUCCESS,\n      payload: orders\n    });\n    localStorage.setItem('orderDetailsList', JSON.stringify(orders));\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FETCH_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/src/actions/orderActions.js"],"names":["Axios","orderConstants","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_FETCH_REQUEST","ORDER_FETCH_SUCCESS","ORDER_FETCH_FAIL","ORDER_DETAILS_FETCH_REQUEST","ORDER_DETAILS_FETCH_SUCCESS","ORDER_DETAILS_FETCH_FAIL","createOrder","order","dispatch","getState","token","userLogin","userInfo","type","config","headers","Authorization","data","post","payload","error","response","message","getOrdersByUserId","user_id","console","log","get","rows","getOrdersByOrderId","order_id","orders","localStorage","getItem","JSON","parse","length","isExist","forEach","setItem","stringify"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\r\nimport Axios from 'axios';\r\nimport { orderConstants } from '../constants/orderConstants';\r\n\r\nconst {\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_FETCH_REQUEST,\r\n  ORDER_FETCH_SUCCESS,\r\n  ORDER_FETCH_FAIL,\r\n  ORDER_DETAILS_FETCH_REQUEST,\r\n  ORDER_DETAILS_FETCH_SUCCESS,\r\n  ORDER_DETAILS_FETCH_FAIL,\r\n} = orderConstants;\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_CREATE_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.post(\r\n      `http://localhost:5000/api/v1/orders`,\r\n      order,\r\n      config\r\n    );\r\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrdersByUserId = (user_id) => async (dispatch, getState) => {\r\n  console.log(user_id);\r\n  const { token } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_FETCH_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/orders`,\r\n      config\r\n    );\r\n    console.log(data);\r\n    dispatch({ type: ORDER_FETCH_SUCCESS, payload: data.rows });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrdersByOrderId = (order_id) => async (dispatch, getState) => {\r\n  const { token, user_id } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_FETCH_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const { data } = await Axios.post(\r\n      `http://localhost:5000/api/v1/orders/orderDetails`,\r\n      { user_id, order_id },\r\n      config\r\n    );\r\n\r\n    let orders = localStorage.getItem('orderDetailsList')\r\n      ? JSON.parse(localStorage.getItem('orderDetailsList'))\r\n      : [];\r\n    if (orders.length === 0) {\r\n      orders = [...orders, data.rows];\r\n    } else {\r\n      let isExist = false;\r\n      orders.forEach((order) => {\r\n        if (order.order_id === data.rows.order_id) {\r\n          console.log(order.order_id, data.rows.order_id);\r\n          isExist = true;\r\n        }\r\n      });\r\n\r\n      if (!isExist) {\r\n        orders = [...orders, data.rows];\r\n      }\r\n    }\r\n    console.log('ORDERS ARRAY', orders);\r\n    dispatch({ type: ORDER_DETAILS_FETCH_SUCCESS, payload: orders });\r\n    localStorage.setItem('orderDetailsList', JSON.stringify(orders));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DETAILS_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}