{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\portfolio-projects\\\\e-commerce-practice\\\\frontend\\\\src\\\\components\\\\screens\\\\UserEditScreen.jsx\";\n\n/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useParams, useHistory } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Message from '../Message';\nimport Loader from '../Loader';\nimport FormContainer from '../FormContainer';\nimport { getUserToUpdate, updateUser, resetUserToUpdate } from '../../actions/userActions';\nimport { userConstants } from '../../constants/userConstants';\nconst {\n  USER_UPDATE_RESET\n} = userConstants;\n\nconst UserEditScreen = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const {\n    firstname: fn,\n    lastname: ln,\n    username: un,\n    email: em,\n    is_admin,\n    loading,\n    error\n  } = useSelector(state => state.userUpdate.userToUpdate);\n  const {\n    success,\n    loading: updateLoading\n  } = useSelector(state => state.updatedUser);\n  const {\n    id: user_id\n  } = useParams();\n  const [email, setEmail] = useState('');\n  const [firstname, setFirstname] = useState('');\n  const [lastname, setLastname] = useState('');\n  const [username, setUsername] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    if (success) {\n      history.push('/admin/users');\n    }\n\n    if (!fn) {\n      dispatch(getUserToUpdate(user_id));\n    } else {\n      setFirstname(fn);\n      setLastname(ln);\n      setUsername(un);\n      setEmail(em);\n      setIsAdmin(is_admin);\n    }\n  }, [dispatch, user_id, fn, ln, un, em, is_admin, success, history]);\n\n  const submitHandler = () => {\n    e.preventDefault();\n    dispatch(updateUser({\n      user_id,\n      firstname,\n      lastname,\n      username,\n      email,\n      is_admin: isAdmin\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, success ? /*#__PURE__*/React.createElement(Message, {\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Successfully Updated\") : null, /*#__PURE__*/React.createElement(LinkContainer, {\n    to: \"/admin/users\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-sm\",\n    onClick: () => {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      dispatch(resetUserToUpdate());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Go Back\")), updateLoading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 24\n    }\n  }) : null, loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"Update User Account\"), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"userId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \"User ID\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    value: user_id,\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"firstname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, \"Firstname\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Firstname\",\n    value: firstname,\n    onChange: e => setFirstname(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"lastname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, \"Lastname\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Lastname\",\n    value: lastname,\n    onChange: e => setLastname(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    placeholder: \"Enter Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Username\",\n    value: username,\n    onChange: e => setUsername(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    id: \"customControlAutosizing\",\n    label: \"is Admin\",\n    checked: isAdmin,\n    onChange: e => setIsAdmin(e.target.checked),\n    custom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variance: \"primary\",\n    onClick: () => submitHandler(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"Update\"))));\n};\n\nexport default UserEditScreen;","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/src/components/screens/UserEditScreen.jsx"],"names":["React","useState","useEffect","Link","useLocation","useParams","useHistory","Form","Button","useDispatch","useSelector","LinkContainer","Message","Loader","FormContainer","getUserToUpdate","updateUser","resetUserToUpdate","userConstants","USER_UPDATE_RESET","UserEditScreen","history","dispatch","firstname","fn","lastname","ln","username","un","email","em","is_admin","loading","error","state","userUpdate","userToUpdate","success","updateLoading","updatedUser","id","user_id","setEmail","setFirstname","setLastname","setUsername","isAdmin","setIsAdmin","push","submitHandler","e","preventDefault","type","target","value","checked"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useLocation, useParams, useHistory } from 'react-router-dom';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport Message from '../Message';\r\nimport Loader from '../Loader';\r\nimport FormContainer from '../FormContainer';\r\nimport {\r\n  getUserToUpdate,\r\n  updateUser,\r\n  resetUserToUpdate,\r\n} from '../../actions/userActions';\r\n\r\nimport { userConstants } from '../../constants/userConstants';\r\n\r\nconst { USER_UPDATE_RESET } = userConstants;\r\n\r\nconst UserEditScreen = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const {\r\n    firstname: fn,\r\n    lastname: ln,\r\n    username: un,\r\n    email: em,\r\n    is_admin,\r\n    loading,\r\n    error,\r\n  } = useSelector((state) => state.userUpdate.userToUpdate);\r\n\r\n  const { success, loading: updateLoading } = useSelector(\r\n    (state) => state.updatedUser\r\n  );\r\n\r\n  const { id: user_id } = useParams();\r\n  const [email, setEmail] = useState('');\r\n  const [firstname, setFirstname] = useState('');\r\n  const [lastname, setLastname] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push('/admin/users');\r\n    }\r\n    if (!fn) {\r\n      dispatch(getUserToUpdate(user_id));\r\n    } else {\r\n      setFirstname(fn);\r\n      setLastname(ln);\r\n      setUsername(un);\r\n      setEmail(em);\r\n      setIsAdmin(is_admin);\r\n    }\r\n  }, [dispatch, user_id, fn, ln, un, em, is_admin, success, history]);\r\n\r\n  const submitHandler = () => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      updateUser({\r\n        user_id,\r\n        firstname,\r\n        lastname,\r\n        username,\r\n        email,\r\n        is_admin: isAdmin,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {success ? (\r\n        <Message variant=\"success\">Successfully Updated</Message>\r\n      ) : null}\r\n      <LinkContainer to=\"/admin/users\">\r\n        <Button\r\n          className=\"btn-sm\"\r\n          onClick={() => {\r\n            dispatch({ type: USER_UPDATE_RESET });\r\n            dispatch(resetUserToUpdate());\r\n          }}\r\n        >\r\n          Go Back\r\n        </Button>\r\n      </LinkContainer>\r\n      {updateLoading ? <Loader /> : null}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <FormContainer>\r\n          <h1>Update User Account</h1>\r\n          <Form>\r\n            <Form.Group controlId=\"userId\">\r\n              <Form.Label>User ID</Form.Label>\r\n              <Form.Control type=\"text\" value={user_id} disabled />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"firstname\">\r\n              <Form.Label>Firstname</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Firstname\"\r\n                value={firstname}\r\n                onChange={(e) => setFirstname(e.target.value)}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"lastname\">\r\n              <Form.Label>Lastname</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Lastname\"\r\n                value={lastname}\r\n                onChange={(e) => setLastname(e.target.value)}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Username\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"username\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                id=\"customControlAutosizing\"\r\n                label=\"is Admin\"\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n                custom\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              type=\"submit\"\r\n              variance=\"primary\"\r\n              onClick={() => submitHandler()}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        </FormContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserEditScreen;\r\n"]},"metadata":{},"sourceType":"module"}