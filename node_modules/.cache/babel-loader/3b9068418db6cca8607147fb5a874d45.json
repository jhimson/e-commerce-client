{"ast":null,"code":"/* eslint-disable camelcase */\nimport Axios from 'axios';\nimport { orderConstants } from '../constants/orderConstants';\nconst {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n  ORDER_FETCH_REQUEST,\n  ORDER_FETCH_SUCCESS,\n  ORDER_FETCH_FAIL,\n  ORDER_DETAILS_FETCH_REQUEST,\n  ORDER_DETAILS_FETCH_SUCCESS,\n  ORDER_DETAILS_FETCH_FAIL,\n  ORDER_ITEMS_FETCH_REQUEST,\n  ORDER_ITEMS_FETCH_SUCCESS,\n  ORDER_ITEMS_FETCH_FAIL,\n  ORDER_PAY_REQUEST,\n  ORDER_PAY_SUCCESS,\n  ORDER_PAY_FAIL,\n  ORDER_FETCH_DISTINCT_REQUEST,\n  ORDER_FETCH_DISTINCT_SUCCESS,\n  ORDER_FETCH_DISTINCT_FAIL,\n  ORDER_FETCH_ONE_REQUEST,\n  ORDER_FETCH_ONE_SUCCESS,\n  ORDER_FETCH_ONE_FAIL,\n  ORDER_FETCH_ONE_RESET\n} = orderConstants;\nexport const createOrder = order => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.post(`http://localhost:5000/api/v1/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getOrdersByUserId = user_id => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_FETCH_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/orders`, config);\n    dispatch({\n      type: ORDER_FETCH_SUCCESS,\n      payload: data.rows\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_FETCH_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getOrdersByOrderId = order_id => async (dispatch, getState) => {\n  const {\n    token,\n    user_id\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_DETAILS_FETCH_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.post(`http://localhost:5000/api/v1/orders/orderDetails`, {\n      user_id,\n      order_id\n    }, config);\n    let orders = localStorage.getItem('orderDetailsList') ? JSON.parse(localStorage.getItem('orderDetailsList')) : [];\n\n    if (orders.length === 0) {\n      orders = [...orders, data.rows];\n    } else {\n      let isExist = false;\n      orders.forEach(order => {\n        if (order.order_id === data.rows.order_id) {\n          console.log(order.order_id, data.rows.order_id);\n          isExist = true;\n        }\n      });\n\n      if (!isExist) {\n        orders = [...orders, data.rows];\n      }\n    }\n\n    console.log('ORDERS ARRAY', orders);\n    dispatch({\n      type: ORDER_DETAILS_FETCH_SUCCESS,\n      payload: orders\n    });\n    localStorage.setItem('orderDetailsList', JSON.stringify(orders));\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FETCH_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getOrderedItemsByOrderId = order_id => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_ITEMS_FETCH_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/orders/${order_id}`, config);\n    dispatch({\n      type: ORDER_ITEMS_FETCH_SUCCESS,\n      payload: data.rows\n    });\n    localStorage.setItem('orderedItems', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: ORDER_ITEMS_FETCH_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const payOrder = (order_id, paymentResult) => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  console.log(token);\n\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.put(`http://localhost:5000/api/v1/orders/${order_id}/pay`, paymentResult, config);\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const fetchDistinctOrderId = () => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: ORDER_FETCH_DISTINCT_REQUEST\n    });\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/orders/distinct`, config);\n    dispatch({\n      type: ORDER_FETCH_DISTINCT_SUCCESS,\n      payload: data.rows\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_FETCH_DISTINCT_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const fetchOneOrder = order_id => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: ORDER_FETCH_ONE_REQUEST\n    });\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/orders/${order_id}/orderDetails`, config);\n    let allOrderList = localStorage.getItem('allOrderList') ? JSON.parse(localStorage.getItem('allOrderList')) : [];\n\n    if (allOrderList.length === 0) {\n      allOrderList = [...allOrderList, data.order];\n    } else {\n      let isExist = false;\n      allOrderList.forEach(order => {\n        if (order.order_id === data.order.order_id) {\n          console.log(order.order_id, data.order.order_id);\n          isExist = true;\n        }\n      });\n\n      if (!isExist) {\n        allOrderList = [...allOrderList, data.order];\n      }\n    }\n\n    dispatch({\n      type: ORDER_FETCH_ONE_SUCCESS,\n      payload: allOrderList\n    });\n    localStorage.setItem('allOrderList', JSON.stringify(allOrderList));\n  } catch (error) {\n    dispatch({\n      type: ORDER_FETCH_ONE_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const resetAllOrderList = () => async dispatch => {\n  localStorage.removeItem('allOrderList');\n  dispatch({\n    type: ORDER_FETCH_ONE_RESET\n  });\n};","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/src/actions/orderActions.js"],"names":["Axios","orderConstants","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_FETCH_REQUEST","ORDER_FETCH_SUCCESS","ORDER_FETCH_FAIL","ORDER_DETAILS_FETCH_REQUEST","ORDER_DETAILS_FETCH_SUCCESS","ORDER_DETAILS_FETCH_FAIL","ORDER_ITEMS_FETCH_REQUEST","ORDER_ITEMS_FETCH_SUCCESS","ORDER_ITEMS_FETCH_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","ORDER_FETCH_DISTINCT_REQUEST","ORDER_FETCH_DISTINCT_SUCCESS","ORDER_FETCH_DISTINCT_FAIL","ORDER_FETCH_ONE_REQUEST","ORDER_FETCH_ONE_SUCCESS","ORDER_FETCH_ONE_FAIL","ORDER_FETCH_ONE_RESET","createOrder","order","dispatch","getState","token","userLogin","userInfo","type","config","headers","Authorization","data","post","payload","error","response","message","getOrdersByUserId","user_id","get","rows","getOrdersByOrderId","order_id","orders","localStorage","getItem","JSON","parse","length","isExist","forEach","console","log","setItem","stringify","getOrderedItemsByOrderId","payOrder","paymentResult","put","fetchDistinctOrderId","fetchOneOrder","allOrderList","resetAllOrderList","removeItem"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\r\nimport Axios from 'axios';\r\nimport { orderConstants } from '../constants/orderConstants';\r\n\r\nconst {\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_FETCH_REQUEST,\r\n  ORDER_FETCH_SUCCESS,\r\n  ORDER_FETCH_FAIL,\r\n  ORDER_DETAILS_FETCH_REQUEST,\r\n  ORDER_DETAILS_FETCH_SUCCESS,\r\n  ORDER_DETAILS_FETCH_FAIL,\r\n  ORDER_ITEMS_FETCH_REQUEST,\r\n  ORDER_ITEMS_FETCH_SUCCESS,\r\n  ORDER_ITEMS_FETCH_FAIL,\r\n  ORDER_PAY_REQUEST,\r\n  ORDER_PAY_SUCCESS,\r\n  ORDER_PAY_FAIL,\r\n  ORDER_FETCH_DISTINCT_REQUEST,\r\n  ORDER_FETCH_DISTINCT_SUCCESS,\r\n  ORDER_FETCH_DISTINCT_FAIL,\r\n  ORDER_FETCH_ONE_REQUEST,\r\n  ORDER_FETCH_ONE_SUCCESS,\r\n  ORDER_FETCH_ONE_FAIL,\r\n  ORDER_FETCH_ONE_RESET,\r\n} = orderConstants;\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_CREATE_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.post(\r\n      `http://localhost:5000/api/v1/orders`,\r\n      order,\r\n      config\r\n    );\r\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrdersByUserId = (user_id) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_FETCH_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/orders`,\r\n      config\r\n    );\r\n    dispatch({ type: ORDER_FETCH_SUCCESS, payload: data.rows });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrdersByOrderId = (order_id) => async (dispatch, getState) => {\r\n  const { token, user_id } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_FETCH_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const { data } = await Axios.post(\r\n      `http://localhost:5000/api/v1/orders/orderDetails`,\r\n      { user_id, order_id },\r\n      config\r\n    );\r\n\r\n    let orders = localStorage.getItem('orderDetailsList')\r\n      ? JSON.parse(localStorage.getItem('orderDetailsList'))\r\n      : [];\r\n    if (orders.length === 0) {\r\n      orders = [...orders, data.rows];\r\n    } else {\r\n      let isExist = false;\r\n      orders.forEach((order) => {\r\n        if (order.order_id === data.rows.order_id) {\r\n          console.log(order.order_id, data.rows.order_id);\r\n          isExist = true;\r\n        }\r\n      });\r\n\r\n      if (!isExist) {\r\n        orders = [...orders, data.rows];\r\n      }\r\n    }\r\n    console.log('ORDERS ARRAY', orders);\r\n    dispatch({ type: ORDER_DETAILS_FETCH_SUCCESS, payload: orders });\r\n    localStorage.setItem('orderDetailsList', JSON.stringify(orders));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DETAILS_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrderedItemsByOrderId = (order_id) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_ITEMS_FETCH_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/orders/${order_id}`,\r\n      config\r\n    );\r\n    dispatch({ type: ORDER_ITEMS_FETCH_SUCCESS, payload: data.rows });\r\n    localStorage.setItem('orderedItems', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_ITEMS_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const payOrder = (order_id, paymentResult) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  console.log(token);\r\n  try {\r\n    dispatch({ type: ORDER_PAY_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.put(\r\n      `http://localhost:5000/api/v1/orders/${order_id}/pay`,\r\n      paymentResult,\r\n      config\r\n    );\r\n\r\n    dispatch({ type: ORDER_PAY_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_PAY_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchDistinctOrderId = () => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  const config = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n\r\n  try {\r\n    dispatch({ type: ORDER_FETCH_DISTINCT_REQUEST });\r\n\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/orders/distinct`,\r\n      config\r\n    );\r\n    dispatch({ type: ORDER_FETCH_DISTINCT_SUCCESS, payload: data.rows });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_FETCH_DISTINCT_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchOneOrder = (order_id) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  const config = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n\r\n  try {\r\n    dispatch({ type: ORDER_FETCH_ONE_REQUEST });\r\n\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/orders/${order_id}/orderDetails`,\r\n      config\r\n    );\r\n    let allOrderList = localStorage.getItem('allOrderList')\r\n      ? JSON.parse(localStorage.getItem('allOrderList'))\r\n      : [];\r\n\r\n    if (allOrderList.length === 0) {\r\n      allOrderList = [...allOrderList, data.order];\r\n    } else {\r\n      let isExist = false;\r\n      allOrderList.forEach((order) => {\r\n        if (order.order_id === data.order.order_id) {\r\n          console.log(order.order_id, data.order.order_id);\r\n          isExist = true;\r\n        }\r\n      });\r\n\r\n      if (!isExist) {\r\n        allOrderList = [...allOrderList, data.order];\r\n      }\r\n    }\r\n    dispatch({ type: ORDER_FETCH_ONE_SUCCESS, payload: allOrderList });\r\n    localStorage.setItem('allOrderList', JSON.stringify(allOrderList));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_FETCH_ONE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const resetAllOrderList = () => async (dispatch) => {\r\n  localStorage.removeItem('allOrderList');\r\n  dispatch({ type: ORDER_FETCH_ONE_RESET });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}