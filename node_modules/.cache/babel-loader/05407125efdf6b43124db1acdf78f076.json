{"ast":null,"code":"/* eslint-disable camelcase */\nimport Axios from 'axios';\nimport { userConstants } from '../constants/userConstants';\n\nconst {\n  uuid\n} = require('uuidv4');\n\nconst {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_RESET,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_REMOVE,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAIL,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL,\n  USER_GET_REQUEST,\n  USER_GET_SUCCESS,\n  USER_GET_FAIL,\n  USER_GET_RESET,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL,\n  USER_UPDATE_RESET\n} = userConstants;\nexport const login = (username, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/api/v1/users/login', {\n      username,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('orderDetailsList');\n  localStorage.removeItem('paymentMethod');\n  localStorage.removeItem('shippingAddress');\n  localStorage.removeItem('userDetails');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_REMOVE\n  });\n  dispatch({\n    type: USER_REGISTER_RESET\n  });\n};\nexport const register = (email, firstname, lastname, username, password) => async dispatch => {\n  const user_id = uuid();\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/api/v1/users', {\n      user_id,\n      email,\n      firstname,\n      lastname,\n      username,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getUserDetails = user_id => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/users/${user_id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userDetails', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = (email, firstname, lastname, username, password) => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await Axios.put(`http://localhost:5000/api/v1/users/profile`, {\n      email,\n      firstname,\n      lastname,\n      username,\n      password\n    }, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/users`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('usersList', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const deleteUser = user_id => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    await Axios.delete(`http://localhost:5000/api/v1/users/${user_id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const updateUser = user => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      data\n    } = await Axios.put(`http://localhost:5000/api/v1/users/${user.user_id}`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_GET_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getUserToUpdate = user_id => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n  console.log('USER ID TO UPDATE', user_id);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({\n      type: USER_GET_REQUEST\n    });\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/users/${user_id}`, config);\n    console.log(data);\n    dispatch({\n      type: USER_GET_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_GET_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const resetUserToUpdate = () => async dispatch => {\n  dispatch({\n    type: USER_GET_RESET\n  });\n};\nexport const resetUpdatedUser = () => async dispatch => {\n  dispatch({\n    type: USER_UPDATE_RESET\n  });\n};","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/src/actions/userActions.js"],"names":["Axios","userConstants","uuid","require","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_RESET","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_REMOVE","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_GET_REQUEST","USER_GET_SUCCESS","USER_GET_FAIL","USER_GET_RESET","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_RESET","login","username","password","dispatch","config","headers","type","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","email","firstname","lastname","user_id","getUserDetails","getState","token","userLogin","userInfo","Authorization","get","updateUserProfile","put","listUsers","deleteUser","delete","updateUser","user","getUserToUpdate","console","log","resetUserToUpdate","resetUpdatedUser"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,QAA8B,4BAA9B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAWC,OAAO,CAAC,QAAD,CAAxB;;AAEA,MAAM;AACJC,EAAAA,kBADI;AAEJC,EAAAA,kBAFI;AAGJC,EAAAA,eAHI;AAIJC,EAAAA,WAJI;AAKJC,EAAAA,qBALI;AAMJC,EAAAA,qBANI;AAOJC,EAAAA,kBAPI;AAQJC,EAAAA,mBARI;AASJC,EAAAA,oBATI;AAUJC,EAAAA,oBAVI;AAWJC,EAAAA,iBAXI;AAYJC,EAAAA,mBAZI;AAaJC,EAAAA,iBAbI;AAcJC,EAAAA,iBAdI;AAeJC,EAAAA,cAfI;AAgBJC,EAAAA,mBAhBI;AAiBJC,EAAAA,mBAjBI;AAkBJC,EAAAA,gBAlBI;AAmBJC,EAAAA,gBAnBI;AAoBJC,EAAAA,gBApBI;AAqBJC,EAAAA,aArBI;AAsBJC,EAAAA,cAtBI;AAuBJC,EAAAA,mBAvBI;AAwBJC,EAAAA,mBAxBI;AAyBJC,EAAAA,gBAzBI;AA0BJC,EAAAA;AA1BI,IA2BF5B,aA3BJ;AA6BA,OAAO,MAAM6B,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB,MAAOC,QAAP,IAAoB;AAC/D,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAKA,MAAI;AACFF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEhC;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEiC,MAAAA;AAAF,QAAW,MAAMrC,KAAK,CAACsC,IAAN,CACrB,0CADqB,EAErB;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAFqB,EAGrBE,MAHqB,CAAvB;AAMAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE/B,kBAAR;AAA4BkC,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AAEAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GAZD,CAYE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE9B,eADC;AAEPiC,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA3BM;AA6BP,OAAO,MAAMC,MAAM,GAAG,MAAOd,QAAD,IAAc;AACxCO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,kBAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,eAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,iBAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,aAAxB;AACAf,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE7B;AAAR,GAAD,CAAR;AACA0B,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAErB;AAAR,GAAD,CAAR;AACAkB,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEzB;AAAR,GAAD,CAAR;AACD,CATM;AAWP,OAAO,MAAMsC,QAAQ,GAAG,CACtBC,KADsB,EAEtBC,SAFsB,EAGtBC,QAHsB,EAItBrB,QAJsB,EAKtBC,QALsB,KAMnB,MAAOC,QAAP,IAAoB;AACvB,QAAMoB,OAAO,GAAGnD,IAAI,EAApB;AACA,QAAMgC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAKA,MAAI;AACFF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE5B;AAAR,KAAD,CAAR;AAEA,UAAM;AAAE6B,MAAAA;AAAF,QAAW,MAAMrC,KAAK,CAACsC,IAAN,CACrB,oCADqB,EAErB;AAAEe,MAAAA,OAAF;AAAWH,MAAAA,KAAX;AAAkBC,MAAAA,SAAlB;AAA6BC,MAAAA,QAA7B;AAAuCrB,MAAAA,QAAvC;AAAiDC,MAAAA;AAAjD,KAFqB,EAGrBE,MAHqB,CAAvB;AAMAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE3B,qBAAR;AAA+B8B,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AAEAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE/B,kBAAR;AAA4BkC,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AAEAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GAdD,CAcE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE1B,kBADC;AAEP6B,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CApCM;AAsCP,OAAO,MAAMQ,cAAc,GAAID,OAAD,IAAa,OAAOpB,QAAP,EAAiBsB,QAAjB,KAA8B;AACvE,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,SAAX,CAAqBC,QAAvC;AACA,QAAMxB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPwB,MAAAA,aAAa,EAAG,UAASH,KAAM;AAFxB;AADI,GAAf;;AAMA,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAExB;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEyB,MAAAA;AAAF,QAAW,MAAMrC,KAAK,CAAC4D,GAAN,CACpB,sCAAqCP,OAAQ,EADzB,EAErBnB,MAFqB,CAAvB;AAIAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEvB,oBAAR;AAA8B0B,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAApC;AACD,GATD,CASE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEtB,iBADC;AAEPyB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA1BM;AA4BP,OAAO,MAAMe,iBAAiB,GAAG,CAC/BX,KAD+B,EAE/BC,SAF+B,EAG/BC,QAH+B,EAI/BrB,QAJ+B,EAK/BC,QAL+B,KAM5B,OAAOC,QAAP,EAAiBsB,QAAjB,KAA8B;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,SAAX,CAAqBC,QAAvC;AACA,QAAMxB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPwB,MAAAA,aAAa,EAAG,UAASH,KAAM;AAFxB;AADI,GAAf;;AAMA,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAExB;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEyB,MAAAA;AAAF,QAAW,MAAMrC,KAAK,CAAC8D,GAAN,CACpB,4CADoB,EAErB;AAAEZ,MAAAA,KAAF;AAASC,MAAAA,SAAT;AAAoBC,MAAAA,QAApB;AAA8BrB,MAAAA,QAA9B;AAAwCC,MAAAA;AAAxC,KAFqB,EAGrBE,MAHqB,CAAvB;AAKAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEvB,oBAAR;AAA8B0B,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACD,GATD,CASE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEtB,iBADC;AAEPyB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CAhCM;AAkCP,OAAO,MAAMiB,SAAS,GAAG,MAAM,OAAO9B,QAAP,EAAiBsB,QAAjB,KAA8B;AAC3D,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,SAAX,CAAqBC,QAAvC;AAEA,QAAMxB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPwB,MAAAA,aAAa,EAAG,UAASH,KAAM;AAFxB;AADI,GAAf;;AAOA,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEpB;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEqB,MAAAA;AAAF,QAAW,MAAMrC,KAAK,CAAC4D,GAAN,CACpB,oCADoB,EAErB1B,MAFqB,CAAvB;AAKAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEnB,iBAAR;AAA2BsB,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAlC;AACD,GAVD,CAUE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAElB,cADC;AAEPqB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA7BM;AA+BP,OAAO,MAAMkB,UAAU,GAAIX,OAAD,IAAa,OAAOpB,QAAP,EAAiBsB,QAAjB,KAA8B;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,SAAX,CAAqBC,QAAvC;AAEA,QAAMxB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPwB,MAAAA,aAAa,EAAG,UAASH,KAAM;AAFxB;AADI,GAAf;;AAOA,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AAEA,UAAMnB,KAAK,CAACiE,MAAN,CAAc,sCAAqCZ,OAAQ,EAA3D,EAA8DnB,MAA9D,CAAN;AAEAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEhB;AAAR,KAAD,CAAR;AACD,GAND,CAME,OAAOwB,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEf,gBADC;AAEPkB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CAzBM;AA2BP,OAAO,MAAMoB,UAAU,GAAIC,IAAD,IAAU,OAAOlC,QAAP,EAAiBsB,QAAjB,KAA8B;AAChE,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,SAAX,CAAqBC,QAAvC;AACA,QAAMxB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPwB,MAAAA,aAAa,EAAG,UAASH,KAAM;AAFxB;AADI,GAAf;;AAOA,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEW,MAAAA;AAAF,QAAW,MAAMrC,KAAK,CAAC8D,GAAN,CACpB,sCAAqCK,IAAI,CAACd,OAAQ,EAD9B,EAErBc,IAFqB,EAGrBjC,MAHqB,CAAvB;AAKAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACAM,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEb,gBAAR;AAA0BgB,MAAAA,OAAO,EAAEF;AAAnC,KAAD,CAAR;AACD,GAVD,CAUE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,gBADC;AAEPW,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA5BM;AA8BP,OAAO,MAAMsB,eAAe,GAAIf,OAAD,IAAa,OAAOpB,QAAP,EAAiBsB,QAAjB,KAA8B;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,SAAX,CAAqBC,QAAvC;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCjB,OAAjC;AACA,QAAMnB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPwB,MAAAA,aAAa,EAAG,UAASH,KAAM;AAFxB;AADI,GAAf;;AAOA,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEe,MAAAA;AAAF,QAAW,MAAMrC,KAAK,CAAC4D,GAAN,CACpB,sCAAqCP,OAAQ,EADzB,EAErBnB,MAFqB,CAAvB;AAIAmC,IAAAA,OAAO,CAACC,GAAR,CAAYjC,IAAZ;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEb,gBAAR;AAA0BgB,MAAAA,OAAO,EAAEF,IAAI,CAAC8B;AAAxC,KAAD,CAAR;AACD,GATD,CASE,OAAOvB,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,aADC;AAEPe,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBO,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA5BM;AA8BP,OAAO,MAAMyB,iBAAiB,GAAG,MAAM,MAAOtC,QAAP,IAAoB;AACzDA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAM+C,gBAAgB,GAAG,MAAM,MAAOvC,QAAP,IAAoB;AACxDA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;AACD,CAFM","sourcesContent":["/* eslint-disable camelcase */\r\nimport Axios from 'axios';\r\n\r\nimport { userConstants } from '../constants/userConstants';\r\n\r\nconst { uuid } = require('uuidv4');\r\n\r\nconst {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_RESET,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_REMOVE,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n  USER_GET_REQUEST,\r\n  USER_GET_SUCCESS,\r\n  USER_GET_FAIL,\r\n  USER_GET_RESET,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_RESET,\r\n} = userConstants;\r\n\r\nexport const login = (username, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST });\r\n\r\n    const { data } = await Axios.post(\r\n      'http://localhost:5000/api/v1/users/login',\r\n      { username, password },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('userInfo');\r\n  localStorage.removeItem('orderDetailsList');\r\n  localStorage.removeItem('paymentMethod');\r\n  localStorage.removeItem('shippingAddress');\r\n  localStorage.removeItem('userDetails');\r\n  dispatch({ type: USER_LOGOUT });\r\n  dispatch({ type: USER_DETAILS_REMOVE });\r\n  dispatch({ type: USER_REGISTER_RESET });\r\n};\r\n\r\nexport const register = (\r\n  email,\r\n  firstname,\r\n  lastname,\r\n  username,\r\n  password\r\n) => async (dispatch) => {\r\n  const user_id = uuid();\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n  try {\r\n    dispatch({ type: USER_REGISTER_REQUEST });\r\n\r\n    const { data } = await Axios.post(\r\n      'http://localhost:5000/api/v1/users',\r\n      { user_id, email, firstname, lastname, username, password },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getUserDetails = (user_id) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  try {\r\n    dispatch({ type: USER_DETAILS_REQUEST });\r\n\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/users/${user_id}`,\r\n      config\r\n    );\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\r\n    localStorage.setItem('userDetails', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateUserProfile = (\r\n  email,\r\n  firstname,\r\n  lastname,\r\n  username,\r\n  password\r\n) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  try {\r\n    dispatch({ type: USER_DETAILS_REQUEST });\r\n\r\n    const { data } = await Axios.put(\r\n      `http://localhost:5000/api/v1/users/profile`,\r\n      { email, firstname, lastname, username, password },\r\n      config\r\n    );\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n\r\n  try {\r\n    dispatch({ type: USER_LIST_REQUEST });\r\n\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/users`,\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_LIST_SUCCESS, payload: data });\r\n    localStorage.setItem('usersList', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteUser = (user_id) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n\r\n  try {\r\n    dispatch({ type: USER_DELETE_REQUEST });\r\n\r\n    await Axios.delete(`http://localhost:5000/api/v1/users/${user_id}`, config);\r\n\r\n    dispatch({ type: USER_DELETE_SUCCESS });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n\r\n  try {\r\n    dispatch({ type: USER_UPDATE_REQUEST });\r\n\r\n    const { data } = await Axios.put(\r\n      `http://localhost:5000/api/v1/users/${user.user_id}`,\r\n      user,\r\n      config\r\n    );\r\n    dispatch({ type: USER_UPDATE_SUCCESS });\r\n    dispatch({ type: USER_GET_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getUserToUpdate = (user_id) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  console.log('USER ID TO UPDATE', user_id);\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n\r\n  try {\r\n    dispatch({ type: USER_GET_REQUEST });\r\n\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/users/${user_id}`,\r\n      config\r\n    );\r\n    console.log(data);\r\n    dispatch({ type: USER_GET_SUCCESS, payload: data.user });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_GET_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const resetUserToUpdate = () => async (dispatch) => {\r\n  dispatch({ type: USER_GET_RESET });\r\n};\r\n\r\nexport const resetUpdatedUser = () => async (dispatch) => {\r\n  dispatch({ type: USER_UPDATE_RESET });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}