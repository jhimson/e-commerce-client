{"ast":null,"code":"/**\n * @fileoverview Runs `prettier` as an ESLint rule.\n * @author Andres Suarez\n */\n'use strict'; // ------------------------------------------------------------------------------\n//  Requirements\n// ------------------------------------------------------------------------------\n\nconst {\n  showInvisibles,\n  generateDifferences\n} = require('prettier-linter-helpers'); // ------------------------------------------------------------------------------\n//  Constants\n// ------------------------------------------------------------------------------\n\n\nconst {\n  INSERT,\n  DELETE,\n  REPLACE\n} = generateDifferences; // ------------------------------------------------------------------------------\n//  Privates\n// ------------------------------------------------------------------------------\n// Lazily-loaded Prettier.\n\nlet prettier; // ------------------------------------------------------------------------------\n//  Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * Reports an \"Insert ...\" issue where text must be inserted.\n * @param {RuleContext} context - The ESLint rule context.\n * @param {number} offset - The source offset where to insert text.\n * @param {string} text - The text to be inserted.\n * @returns {void}\n */\n\nfunction reportInsert(context, offset, text) {\n  const pos = context.getSourceCode().getLocFromIndex(offset);\n  const range = [offset, offset];\n  context.report({\n    message: 'Insert `{{ code }}`',\n    data: {\n      code: showInvisibles(text)\n    },\n    loc: {\n      start: pos,\n      end: pos\n    },\n\n    fix(fixer) {\n      return fixer.insertTextAfterRange(range, text);\n    }\n\n  });\n}\n/**\n * Reports a \"Delete ...\" issue where text must be deleted.\n * @param {RuleContext} context - The ESLint rule context.\n * @param {number} offset - The source offset where to delete text.\n * @param {string} text - The text to be deleted.\n * @returns {void}\n */\n\n\nfunction reportDelete(context, offset, text) {\n  const start = context.getSourceCode().getLocFromIndex(offset);\n  const end = context.getSourceCode().getLocFromIndex(offset + text.length);\n  const range = [offset, offset + text.length];\n  context.report({\n    message: 'Delete `{{ code }}`',\n    data: {\n      code: showInvisibles(text)\n    },\n    loc: {\n      start,\n      end\n    },\n\n    fix(fixer) {\n      return fixer.removeRange(range);\n    }\n\n  });\n}\n/**\n * Reports a \"Replace ... with ...\" issue where text must be replaced.\n * @param {RuleContext} context - The ESLint rule context.\n * @param {number} offset - The source offset where to replace deleted text\n with inserted text.\n * @param {string} deleteText - The text to be deleted.\n * @param {string} insertText - The text to be inserted.\n * @returns {void}\n */\n\n\nfunction reportReplace(context, offset, deleteText, insertText) {\n  const start = context.getSourceCode().getLocFromIndex(offset);\n  const end = context.getSourceCode().getLocFromIndex(offset + deleteText.length);\n  const range = [offset, offset + deleteText.length];\n  context.report({\n    message: 'Replace `{{ deleteCode }}` with `{{ insertCode }}`',\n    data: {\n      deleteCode: showInvisibles(deleteText),\n      insertCode: showInvisibles(insertText)\n    },\n    loc: {\n      start,\n      end\n    },\n\n    fix(fixer) {\n      return fixer.replaceTextRange(range, insertText);\n    }\n\n  });\n} // ------------------------------------------------------------------------------\n//  Module Definition\n// ------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  configs: {\n    recommended: {\n      extends: ['prettier'],\n      plugins: ['prettier'],\n      rules: {\n        'prettier/prettier': 'error'\n      }\n    }\n  },\n  rules: {\n    prettier: {\n      meta: {\n        docs: {\n          url: 'https://github.com/prettier/eslint-plugin-prettier#options'\n        },\n        type: 'layout',\n        fixable: 'code',\n        schema: [// Prettier options:\n        {\n          type: 'object',\n          properties: {},\n          additionalProperties: true\n        }, {\n          type: 'object',\n          properties: {\n            usePrettierrc: {\n              type: 'boolean'\n            },\n            fileInfoOptions: {\n              type: 'object',\n              properties: {},\n              additionalProperties: true\n            }\n          },\n          additionalProperties: true\n        }]\n      },\n\n      create(context) {\n        const usePrettierrc = !context.options[1] || context.options[1].usePrettierrc !== false;\n        const eslintFileInfoOptions = context.options[1] && context.options[1].fileInfoOptions || {};\n        const sourceCode = context.getSourceCode();\n        const filepath = context.getFilename();\n        const source = sourceCode.text; // This allows long-running ESLint processes (e.g. vscode-eslint) to\n        // pick up changes to .prettierrc without restarting the editor. This\n        // will invalidate the prettier plugin cache on every file as well which\n        // will make ESLint very slow, so it would probably be a good idea to\n        // find a better way to do this.\n\n        if (usePrettierrc && prettier && prettier.clearConfigCache) {\n          prettier.clearConfigCache();\n        }\n\n        return {\n          Program() {\n            if (!prettier) {\n              // Prettier is expensive to load, so only load it if needed.\n              prettier = require('prettier');\n            }\n\n            const eslintPrettierOptions = context.options[0] || {};\n            const prettierRcOptions = usePrettierrc ? prettier.resolveConfig.sync(filepath, {\n              editorconfig: true\n            }) : null;\n            const prettierFileInfo = prettier.getFileInfo.sync(filepath, Object.assign({}, {\n              resolveConfig: true,\n              ignorePath: '.prettierignore'\n            }, eslintFileInfoOptions)); // Skip if file is ignored using a .prettierignore file\n\n            if (prettierFileInfo.ignored) {\n              return;\n            }\n\n            const initialOptions = {}; // ESLint suppports processors that let you extract and lint JS\n            // fragments within a non-JS language. In the cases where prettier\n            // supports the same language as a processor, we want to process\n            // the provided source code as javascript (as ESLint provides the\n            // rules with fragments of JS) instead of guessing the parser\n            // based off the filename. Otherwise, for instance, on a .md file we\n            // end up trying to run prettier over a fragment of JS using the\n            // markdown parser, which throws an error.\n            // If we can't infer the parser from from the filename, either\n            // because no filename was provided or because there is no parser\n            // found for the filename, use javascript.\n            // This is added to the options first, so that\n            // prettierRcOptions and eslintPrettierOptions can still override\n            // the parser.\n            //\n            // `parserBlocklist` should contain the list of prettier parser\n            // names for file types where:\n            // * Prettier supports parsing the file type\n            // * There is an ESLint processor that extracts JavaScript snippets\n            //   from the file type.\n\n            const parserBlocklist = [null, 'graphql', 'markdown', 'html'];\n\n            if (parserBlocklist.indexOf(prettierFileInfo.inferredParser) !== -1) {\n              // Prettier v1.16.0 renamed the `babylon` parser to `babel`\n              // Use the modern name if available\n              const supportBabelParser = prettier.getSupportInfo().languages.some(language => language.parsers.includes('babel'));\n              initialOptions.parser = supportBabelParser ? 'babel' : 'babylon';\n            }\n\n            const prettierOptions = Object.assign({}, initialOptions, prettierRcOptions, eslintPrettierOptions, {\n              filepath\n            }); // prettier.format() may throw a SyntaxError if it cannot parse the\n            // source code it is given. Ususally for JS files this isn't a\n            // problem as ESLint will report invalid syntax before trying to\n            // pass it to the prettier plugin. However this might be a problem\n            // for non-JS languages that are handled by a plugin. Notably Vue\n            // files throw an error if they contain unclosed elements, such as\n            // `<template><div></template>. In this case report an error at the\n            // point at which parsing failed.\n\n            let prettierSource;\n\n            try {\n              prettierSource = prettier.format(source, prettierOptions);\n            } catch (err) {\n              if (!(err instanceof SyntaxError)) {\n                throw err;\n              }\n\n              let message = 'Parsing error: ' + err.message; // Prettier's message contains a codeframe style preview of the\n              // invalid code and the line/column at which the error occured.\n              // ESLint shows those pieces of information elsewhere already so\n              // remove them from the message\n\n              if (err.codeFrame) {\n                message = message.replace(`\\n${err.codeFrame}`, '');\n              }\n\n              if (err.loc) {\n                message = message.replace(/ \\(\\d+:\\d+\\)$/, '');\n              }\n\n              context.report({\n                message,\n                loc: err.loc\n              });\n              return;\n            }\n\n            if (source !== prettierSource) {\n              const differences = generateDifferences(source, prettierSource);\n              differences.forEach(difference => {\n                switch (difference.operation) {\n                  case INSERT:\n                    reportInsert(context, difference.offset, difference.insertText);\n                    break;\n\n                  case DELETE:\n                    reportDelete(context, difference.offset, difference.deleteText);\n                    break;\n\n                  case REPLACE:\n                    reportReplace(context, difference.offset, difference.deleteText, difference.insertText);\n                    break;\n                }\n              });\n            }\n          }\n\n        };\n      }\n\n    }\n  }\n};","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/node_modules/eslint-plugin-prettier/eslint-plugin-prettier.js"],"names":["showInvisibles","generateDifferences","require","INSERT","DELETE","REPLACE","prettier","reportInsert","context","offset","text","pos","getSourceCode","getLocFromIndex","range","report","message","data","code","loc","start","end","fix","fixer","insertTextAfterRange","reportDelete","length","removeRange","reportReplace","deleteText","insertText","deleteCode","insertCode","replaceTextRange","module","exports","configs","recommended","extends","plugins","rules","meta","docs","url","type","fixable","schema","properties","additionalProperties","usePrettierrc","fileInfoOptions","create","options","eslintFileInfoOptions","sourceCode","filepath","getFilename","source","clearConfigCache","Program","eslintPrettierOptions","prettierRcOptions","resolveConfig","sync","editorconfig","prettierFileInfo","getFileInfo","Object","assign","ignorePath","ignored","initialOptions","parserBlocklist","indexOf","inferredParser","supportBabelParser","getSupportInfo","languages","some","language","parsers","includes","parser","prettierOptions","prettierSource","format","err","SyntaxError","codeFrame","replace","differences","forEach","difference","operation"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Runs `prettier` as an ESLint rule.\n * @author Andres Suarez\n */\n\n'use strict';\n\n// ------------------------------------------------------------------------------\n//  Requirements\n// ------------------------------------------------------------------------------\n\nconst {\n  showInvisibles,\n  generateDifferences\n} = require('prettier-linter-helpers');\n\n// ------------------------------------------------------------------------------\n//  Constants\n// ------------------------------------------------------------------------------\n\nconst { INSERT, DELETE, REPLACE } = generateDifferences;\n\n// ------------------------------------------------------------------------------\n//  Privates\n// ------------------------------------------------------------------------------\n\n// Lazily-loaded Prettier.\nlet prettier;\n\n// ------------------------------------------------------------------------------\n//  Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * Reports an \"Insert ...\" issue where text must be inserted.\n * @param {RuleContext} context - The ESLint rule context.\n * @param {number} offset - The source offset where to insert text.\n * @param {string} text - The text to be inserted.\n * @returns {void}\n */\nfunction reportInsert(context, offset, text) {\n  const pos = context.getSourceCode().getLocFromIndex(offset);\n  const range = [offset, offset];\n  context.report({\n    message: 'Insert `{{ code }}`',\n    data: { code: showInvisibles(text) },\n    loc: { start: pos, end: pos },\n    fix(fixer) {\n      return fixer.insertTextAfterRange(range, text);\n    }\n  });\n}\n\n/**\n * Reports a \"Delete ...\" issue where text must be deleted.\n * @param {RuleContext} context - The ESLint rule context.\n * @param {number} offset - The source offset where to delete text.\n * @param {string} text - The text to be deleted.\n * @returns {void}\n */\nfunction reportDelete(context, offset, text) {\n  const start = context.getSourceCode().getLocFromIndex(offset);\n  const end = context.getSourceCode().getLocFromIndex(offset + text.length);\n  const range = [offset, offset + text.length];\n  context.report({\n    message: 'Delete `{{ code }}`',\n    data: { code: showInvisibles(text) },\n    loc: { start, end },\n    fix(fixer) {\n      return fixer.removeRange(range);\n    }\n  });\n}\n\n/**\n * Reports a \"Replace ... with ...\" issue where text must be replaced.\n * @param {RuleContext} context - The ESLint rule context.\n * @param {number} offset - The source offset where to replace deleted text\n with inserted text.\n * @param {string} deleteText - The text to be deleted.\n * @param {string} insertText - The text to be inserted.\n * @returns {void}\n */\nfunction reportReplace(context, offset, deleteText, insertText) {\n  const start = context.getSourceCode().getLocFromIndex(offset);\n  const end = context\n    .getSourceCode()\n    .getLocFromIndex(offset + deleteText.length);\n  const range = [offset, offset + deleteText.length];\n  context.report({\n    message: 'Replace `{{ deleteCode }}` with `{{ insertCode }}`',\n    data: {\n      deleteCode: showInvisibles(deleteText),\n      insertCode: showInvisibles(insertText)\n    },\n    loc: { start, end },\n    fix(fixer) {\n      return fixer.replaceTextRange(range, insertText);\n    }\n  });\n}\n\n// ------------------------------------------------------------------------------\n//  Module Definition\n// ------------------------------------------------------------------------------\n\nmodule.exports = {\n  configs: {\n    recommended: {\n      extends: ['prettier'],\n      plugins: ['prettier'],\n      rules: {\n        'prettier/prettier': 'error'\n      }\n    }\n  },\n  rules: {\n    prettier: {\n      meta: {\n        docs: {\n          url: 'https://github.com/prettier/eslint-plugin-prettier#options'\n        },\n        type: 'layout',\n        fixable: 'code',\n        schema: [\n          // Prettier options:\n          {\n            type: 'object',\n            properties: {},\n            additionalProperties: true\n          },\n          {\n            type: 'object',\n            properties: {\n              usePrettierrc: { type: 'boolean' },\n              fileInfoOptions: {\n                type: 'object',\n                properties: {},\n                additionalProperties: true\n              }\n            },\n            additionalProperties: true\n          }\n        ]\n      },\n      create(context) {\n        const usePrettierrc =\n          !context.options[1] || context.options[1].usePrettierrc !== false;\n        const eslintFileInfoOptions =\n          (context.options[1] && context.options[1].fileInfoOptions) || {};\n        const sourceCode = context.getSourceCode();\n        const filepath = context.getFilename();\n        const source = sourceCode.text;\n\n        // This allows long-running ESLint processes (e.g. vscode-eslint) to\n        // pick up changes to .prettierrc without restarting the editor. This\n        // will invalidate the prettier plugin cache on every file as well which\n        // will make ESLint very slow, so it would probably be a good idea to\n        // find a better way to do this.\n        if (usePrettierrc && prettier && prettier.clearConfigCache) {\n          prettier.clearConfigCache();\n        }\n\n        return {\n          Program() {\n            if (!prettier) {\n              // Prettier is expensive to load, so only load it if needed.\n              prettier = require('prettier');\n            }\n\n            const eslintPrettierOptions = context.options[0] || {};\n\n            const prettierRcOptions = usePrettierrc\n              ? prettier.resolveConfig.sync(filepath, {\n                  editorconfig: true\n                })\n              : null;\n\n            const prettierFileInfo = prettier.getFileInfo.sync(\n              filepath,\n              Object.assign(\n                {},\n                { resolveConfig: true, ignorePath: '.prettierignore' },\n                eslintFileInfoOptions\n              )\n            );\n\n            // Skip if file is ignored using a .prettierignore file\n            if (prettierFileInfo.ignored) {\n              return;\n            }\n\n            const initialOptions = {};\n\n            // ESLint suppports processors that let you extract and lint JS\n            // fragments within a non-JS language. In the cases where prettier\n            // supports the same language as a processor, we want to process\n            // the provided source code as javascript (as ESLint provides the\n            // rules with fragments of JS) instead of guessing the parser\n            // based off the filename. Otherwise, for instance, on a .md file we\n            // end up trying to run prettier over a fragment of JS using the\n            // markdown parser, which throws an error.\n            // If we can't infer the parser from from the filename, either\n            // because no filename was provided or because there is no parser\n            // found for the filename, use javascript.\n            // This is added to the options first, so that\n            // prettierRcOptions and eslintPrettierOptions can still override\n            // the parser.\n            //\n            // `parserBlocklist` should contain the list of prettier parser\n            // names for file types where:\n            // * Prettier supports parsing the file type\n            // * There is an ESLint processor that extracts JavaScript snippets\n            //   from the file type.\n            const parserBlocklist = [null, 'graphql', 'markdown', 'html'];\n            if (\n              parserBlocklist.indexOf(prettierFileInfo.inferredParser) !== -1\n            ) {\n              // Prettier v1.16.0 renamed the `babylon` parser to `babel`\n              // Use the modern name if available\n              const supportBabelParser = prettier\n                .getSupportInfo()\n                .languages.some(language => language.parsers.includes('babel'));\n\n              initialOptions.parser = supportBabelParser ? 'babel' : 'babylon';\n            }\n\n            const prettierOptions = Object.assign(\n              {},\n              initialOptions,\n              prettierRcOptions,\n              eslintPrettierOptions,\n              { filepath }\n            );\n\n            // prettier.format() may throw a SyntaxError if it cannot parse the\n            // source code it is given. Ususally for JS files this isn't a\n            // problem as ESLint will report invalid syntax before trying to\n            // pass it to the prettier plugin. However this might be a problem\n            // for non-JS languages that are handled by a plugin. Notably Vue\n            // files throw an error if they contain unclosed elements, such as\n            // `<template><div></template>. In this case report an error at the\n            // point at which parsing failed.\n            let prettierSource;\n            try {\n              prettierSource = prettier.format(source, prettierOptions);\n            } catch (err) {\n              if (!(err instanceof SyntaxError)) {\n                throw err;\n              }\n\n              let message = 'Parsing error: ' + err.message;\n\n              // Prettier's message contains a codeframe style preview of the\n              // invalid code and the line/column at which the error occured.\n              // ESLint shows those pieces of information elsewhere already so\n              // remove them from the message\n              if (err.codeFrame) {\n                message = message.replace(`\\n${err.codeFrame}`, '');\n              }\n              if (err.loc) {\n                message = message.replace(/ \\(\\d+:\\d+\\)$/, '');\n              }\n\n              context.report({ message, loc: err.loc });\n\n              return;\n            }\n\n            if (source !== prettierSource) {\n              const differences = generateDifferences(source, prettierSource);\n\n              differences.forEach(difference => {\n                switch (difference.operation) {\n                  case INSERT:\n                    reportInsert(\n                      context,\n                      difference.offset,\n                      difference.insertText\n                    );\n                    break;\n                  case DELETE:\n                    reportDelete(\n                      context,\n                      difference.offset,\n                      difference.deleteText\n                    );\n                    break;\n                  case REPLACE:\n                    reportReplace(\n                      context,\n                      difference.offset,\n                      difference.deleteText,\n                      difference.insertText\n                    );\n                    break;\n                }\n              });\n            }\n          }\n        };\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}