{"ast":null,"code":"/* eslint-disable camelcase */\nimport Axios from 'axios';\nimport { orderConstants } from '../constants/orderConstants';\nconst {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n  ORDER_FETCH_REQUEST,\n  ORDER_FETCH_SUCCESS,\n  ORDER_FETCH_FAIL\n} = orderConstants;\nexport const createOrder = order => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.post(`http://localhost:5000/api/v1/orders`, order, config);\n    console.log(data);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};\nexport const getOrdersByUserId = order => async (dispatch, getState) => {\n  const {\n    token,\n    user_id\n  } = getState().userLogin.userInfo;\n\n  try {\n    dispatch({\n      type: ORDER_FETCH_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/api/v1/orders`, {\n      user_id\n    }, config);\n    console.log(data);\n    dispatch({\n      type: ORDER_FETCH_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_FETCH_FAIL,\n      payload: error.response && error.response.data.error.message ? error.response.data.error.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/Development/portfolio-projects/e-commerce-practice/frontend/src/actions/orderActions.js"],"names":["Axios","orderConstants","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_FETCH_REQUEST","ORDER_FETCH_SUCCESS","ORDER_FETCH_FAIL","createOrder","order","dispatch","getState","token","userLogin","userInfo","type","config","headers","Authorization","data","post","console","log","payload","error","response","message","getOrdersByUserId","user_id","get"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,MAAM;AACJC,EAAAA,oBADI;AAEJC,EAAAA,oBAFI;AAGJC,EAAAA,iBAHI;AAIJC,EAAAA,mBAJI;AAKJC,EAAAA,mBALI;AAMJC,EAAAA;AANI,IAOFN,cAPJ;AASA,OAAO,MAAMO,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,SAAX,CAAqBC,QAAvC;;AACA,MAAI;AACFJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;AAEA,UAAMc,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASN,KAAM;AAFxB;AADI,KAAf;AAOA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMnB,KAAK,CAACoB,IAAN,CACpB,qCADoB,EAErBX,KAFqB,EAGrBO,MAHqB,CAAvB;AAKAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAT,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEZ,oBAAR;AAA8BoB,MAAAA,OAAO,EAAEJ;AAAvC,KAAD,CAAR;AACD,GAjBD,CAiBE,OAAOK,KAAP,EAAc;AACdd,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX,iBADC;AAEPmB,MAAAA,OAAO,EACLC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBK,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBK,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA5BM;AA8BP,OAAO,MAAMC,iBAAiB,GAAIlB,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACxE,QAAM;AAAEC,IAAAA,KAAF;AAASgB,IAAAA;AAAT,MAAqBjB,QAAQ,GAAGE,SAAX,CAAqBC,QAAhD;;AACA,MAAI;AACFJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AAEA,UAAMW,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASN,KAAM;AAFxB;AADI,KAAf;AAOA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMnB,KAAK,CAAC6B,GAAN,CACpB,qCADoB,EAErB;AAAED,MAAAA;AAAF,KAFqB,EAGrBZ,MAHqB,CAAvB;AAKAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAT,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAET,mBAAR;AAA6BiB,MAAAA,OAAO,EAAEJ;AAAtC,KAAD,CAAR;AACD,GAjBD,CAiBE,OAAOK,KAAP,EAAc;AACdd,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,gBADC;AAEPgB,MAAAA,OAAO,EACLC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBK,KAApB,CAA0BE,OAA5C,GACIF,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBK,KAApB,CAA0BE,OAD9B,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA5BM","sourcesContent":["/* eslint-disable camelcase */\r\nimport Axios from 'axios';\r\nimport { orderConstants } from '../constants/orderConstants';\r\n\r\nconst {\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_FETCH_REQUEST,\r\n  ORDER_FETCH_SUCCESS,\r\n  ORDER_FETCH_FAIL,\r\n} = orderConstants;\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  const { token } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_CREATE_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.post(\r\n      `http://localhost:5000/api/v1/orders`,\r\n      order,\r\n      config\r\n    );\r\n    console.log(data);\r\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrdersByUserId = (order) => async (dispatch, getState) => {\r\n  const { token, user_id } = getState().userLogin.userInfo;\r\n  try {\r\n    dispatch({ type: ORDER_FETCH_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await Axios.get(\r\n      `http://localhost:5000/api/v1/orders`,\r\n      { user_id },\r\n      config\r\n    );\r\n    console.log(data);\r\n    dispatch({ type: ORDER_FETCH_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error.message\r\n          ? error.response.data.error.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}